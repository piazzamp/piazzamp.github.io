
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8">
		<title></title>
		<!-- this is an archived tumblr post published on 2015-09-29 22:35:43 -0500 CDT at http://mattpiazza.com/post/129753260235/2015-csaw-ctf-web-200-lawn-care-writeup -->
  </head>
  <body>
	<p>I love lawn care. not that I do any, per se. but the the first challenge I attempted with <a href="https://ctf.isis.poly.edu/team/349">my team</a> for the college of charleston’s cyber security club, was based on a nice, healthy lawn. overall, it was an easy challenge that took a bit of fiddling up front to find the vulnerability. when you first enter the challenge you are presented with the following: 
</p><img src="https://78.media.tumblr.com/1b3c9a5a768bf8b5a740b90fb1624802/tumblr_inline_nvgxl9vclN1rdmpel_540.png" alt=""/><p>the most interesting things off the bat are the links to careers in the footer for indications of what technologies are in use here as well as the username &amp; password fields at the top. clicking the green grow button makes grass grow through the magic of javascript. the careers page was mostly jokes, but it did include about three interesting bullet points: javascript, <b>git</b>, and erlang. my first thought was sql injection, but that was wrong. time to tap ctrl-u (command-option-u) and view that source. yes, yes, javascript as they mentioned on the careers page. the first block of js on the page does three things:</p>
<pre style="font-family:monospace">
        function init(){
            document.getElementById('login_form').onsubmit = function() {
                var pass_field = document.getElementById('password'); 
                pass_field.value = CryptoJS.MD5(pass_field.value).toString(CryptoJS.enc.Hex);
        };
        $.ajax('.git/refs/heads/master').done(function(version){$('#version').html('Version: ' +  version.substring (0,6))});
        initGrass();
        }
</pre>
<p><br/></p>

<p>first, it assigns a handler that hashes (md5) the password when submitted. client-side hashing, as the saying goes.<br/></p><p>I’m no js professional, but then I think it fills the element at anchor <span style="font-family:monospace">#version</span> with the first six characters from <span style="font-family:monospace">.git/refs/heads/master</span></p><p>lastly it calls <span style="font-family:monospace">initGrass()</span> to start the game</p><p>oh wait. is that a reference to the <span style="font-family:monospace">.git</span> hidden directory? (yes). I traipse over to a local git repo of mine and run tree. an interesting file I see whose existence I can easily verify on the lawncare game is <span style="font-family:monospace">.git/COMMIT_EDITMSG</span>. off to <a href="http://54.165.252.74:8089/.git/COMMIT_EDITMSG">COMMIT_EDITMSG</a> I go. </p><pre style="font-family:monospace">I think I'll just put mah source code riiiiighhhht here. Perfectly safe place for some source code.</pre> it says<p>ok well their code is somewhere on here. but how do I get it? is it in <span style="font-family:monospace">/src</span> or something? OH WAIT it’s a dang git repo, that I can probably clone. </p><pre style="font-family:monospace">git clone <a href="http://54.165.252.74:8089/.git">http://54.165.252.74:8089/.git</a></pre> does the trick<p>in the repo there are 4 files to which I previously did not have access. the rest are js and html. the 4 new ones are <span style="font-family:monospace">__HINT__, premium.php, sign_up.php, &amp; validate_pass.php</span></p><p>I start in <span style="font-family:monospace">sign_up.php</span> and saw an easy sqli vulnerability: <span style="font-family:monospace">$query = &ldquo;SELECT username FROM users WHERE username LIKE &rsquo;$user&rsquo;;&rdquo;;</span> obviously the next logical thing to do is to put a &rsquo;<span style="font-family:monospace">%</span>&rsquo; in as my username during the signup process. I do that and get: </p><figure data-orig-width="1356" data-orig-height="478" class="tmblr-full"><img src="https://78.media.tumblr.com/d2fe8525c7b96958f7b146acb01fa3db/tumblr_inline_nvgyukwUfY1rdmpel_540.png" alt="image" data-orig-width="1356" data-orig-height="478"/></figure><p>so close</p><p>then I pop into <span style="font-family:monospace">validate_pass.php</span> to find the juicy vulnerability:</p>
<figure data-orig-width="1650" data-orig-height="764" class="tmblr-full"><img src="https://78.media.tumblr.com/dfed247e5cfa729b44fa235a578fa58d/tumblr_inline_nvgz05T8cG1rdmpel_540.png" alt="image" data-orig-width="1650" data-orig-height="764"/></figure><p>you can see there on line 7 that the hash is being pulled out of some <span style="font-family:monospace">users</span> table and compared to the hash that was passed in from the client. first, it immediately fails if the lengths are not equivalent. but we know that an md5 hash is 16 bytes or 32 hex characters, so that is an odd check. finally it iterates through both hashes it has in order to compare the strings. so when would the length of these two hashes be the same, but the values of the hashes be easily computable or guessable?? ah, when the hashes lengths are both 0! if we pass in a username that is not in the <span style="font-family:monospace">users</span>  table, then we can assign an empty string to <span style="font-family:monospace">$hash</span> – take your pick of obscure username. on the client side we also have to pass in an empty string as the password hash. two things ‘prevent’ us from doing this: the field is labelled as required in the html so chrome will not let us submit the login form unless that field is populated or the <span style="font-family:monospace">required</span> label is removed. then we have the javascript that is hashing the password on submit. every input to an md5 hashing function will produce 16 bytes of output regardless of the size of the input, so entering an empty password will not result in an empty hash. we can either delete the javascript from the page or remove the identifier by which it is selecting the password field (ie: <span style="font-family:monospace">getElementById</span>). then we can submit a bogus username and a blank password to capture the flag (curl would also be a quick and easy way around the client-side validation/hashing)</p><figure data-orig-width="1176" data-orig-height="838" class="tmblr-full"><img src="https://78.media.tumblr.com/9027ac257e7abcd3fa053ff9db69486c/tumblr_inline_nvgzpdsQ9X1rdmpel_540.png" alt="image" data-orig-width="1176" data-orig-height="838"/></figure><p>neat-o team</p>
  </body>
</html>
