<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.1">Jekyll</generator><link href="https://piazzamp.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://piazzamp.github.io/" rel="alternate" type="text/html" /><updated>2018-05-21T21:13:10-05:00</updated><id>https://piazzamp.github.io/</id><title type="html">memory leak</title><subtitle>matt's blog</subtitle><entry><title type="html">Mission Workshop Monty Messenger Bag Review</title><link href="https://piazzamp.github.io/notes/mission-workshop-monty-review" rel="alternate" type="text/html" title="Mission Workshop Monty Messenger Bag Review" /><published>2018-05-19T16:34:00-05:00</published><updated>2018-05-19T16:34:00-05:00</updated><id>https://piazzamp.github.io/notes/mission-workshop-monty-review</id><content type="html" xml:base="https://piazzamp.github.io/notes/mission-workshop-monty-review">&lt;p&gt;&lt;img src=&quot;/assets/rolled.jpg&quot; alt=&quot;The Monty with its top rolled down&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here’s a blog post that is not about computers because, as it turns out, I have more than one interest. Who knew? If you follow me on twitter, you may have already picked up on my thing for backpacks. I cannot explain why I like them; I will defend myself, however, by stating outright that I am not an EDC bro and do not have any length of paracord on my keychain - I do have a knife, but it lives near my front door where I cut open my purchases from the world-wide web. One of those purchases was a messenger bag from the bike-heads at Mission Workshop: The Monty - Advanced.&lt;/p&gt;

&lt;p&gt;The Monty is a medium-sized (21L) messenger bag with a main compartment and two external pockets that are the size of a small paperback (they fit my kindle with room to spare). It comes in a variety of fabrics at a few different price points. I opted for the “Advanced” HT500 fabric since they say it wears well - like waxed canvas - and I wanted to check out their Arkiv strap buckles. The all-synthetic fabric on my previous bag showed almost no wear after almost two years of continuous use and I’d had enough.&lt;/p&gt;

&lt;p&gt;As a devoted backpack-boy, this bag was my first messenger bag. Every morning on the train I’d stare longingly at the sweet messenger bags and the ease with which fellow commuters accessed their possessions inside. Plus messenger bags look cool as hell and I’m a sap for good looking bags. It was a traditional “grass is greener” situation - I didn’t consider the trade-offs and that’s why I’m here now. Though there are a handful of benefits to messenger bags (as seen on the train). You can slide the bag around your body and sit comfortably without taking the bag off. Once sitting thusly, you can get whatever goodies you want from within. Messenger bags can also look slightly less childish or a bit more professional than backpacks - though the Monty doesn’t fit into that category thanks to its tech look. Basically they’re the same benefits as a purse just in a bigger package. After a few days of wear, the downsides started to present themselves as well. Body-hugging messenger bags tend to be poor for hard, flat objects like a laptop. (Do other people make a distinction between messenger bags (the cycling-friendly, body-hugging variety) and shoulder bags (the dangly variety)?). The flat surface of a laptop lying diagonally across your back also makes messenger bags a bit less comfortable than their two-strapped brethren. And if you have a heavy load (which I rarely do), the one-strap design can make your weak, tech-worker shoulder sore in a heartbeat. Once I added a six pack or two to my laptop on my walk home and my stuffed bag began to bounce on each step - it was strange and not something that’s likely to happen with one of my beloved backpacks. There are also the mount/dismount mechanics that involve sliding the strap over your head which can be more trouble than it’s worth if you’re wearing a loose hat (as I’m known to wear).&lt;/p&gt;

&lt;p&gt;None of those are specific to the Monty - Advanced; certainly you’ve only read this far to hear about the cutting-edge Arkiv closure system and how the weatherproofing holds up in the real world. I did really like the components of the bag. The HT500 fabric looks very good - it has none of the synthetic-fabric shine common with nylon “pack cloth” and just enough of the feel of waxed canvas without being scratchable. I didn’t want an ostentatious fabric and this HT500 stuff sort of just blends into the background. Their proprietary closure/expansion system, “Arkiv”, is pretty neat. Mission Workshop’s Arkiv line of bags has rigid webbing rails onto which you can slide metal brackets attached to expansion modules or whatever you want to call them. But on the Monty - Advanced, the Arkiv rails and brackets are simply used to secure the main flap by sliding brackets on elastic straps over short rails on the flap of the bag. Since those short rails have to be rigid, they get in the way when closing the bag as a roll-top (the flap you’re rolling is partially rigid!). But it still works and looks good either way. The straps also get in the way when accessing the outer pockets though. When the bag’s closed with the flap unrolled, the flap covers up the external pockets so you have to unlatch at least one side of the main compartment to get your book out. It velcros closed when rolled down, so the Arkiv brackets then slide onto additional rails on the external pocket flap which you have to undo if you want to get into those pockets later. The external pockets also share a flap covering so I spent a lot of time bending it back to open one of the two pockets - a lot of the access to these pockets feels like an all-or-nothing effort where you either open the whole frickin bag or you just leave everything closed and stare mindlessly into your phone that’s always available in your jeans pocket. The Arkiv buckles do look about a hundred times better than the traditional snap-fit buckles on every other bag. It makes the bag look like it was constructed solidly. The construction quality definitely feels like a real “American-Made 9 out of 10”. On the other hand, there’s no internal organization in the bag. My laptop was free to slide around, twist diagonally and mess up my look. I really like separation between my precious work laptop and the other garbage I have in my bag (like soup).&lt;/p&gt;

&lt;p&gt;The Monty - Advanced is a good bag. But it is for someone other than me. I will stick to my backpacks and let folks who have softer loads slide into this delightful bag. Maybe I’ll use it as a weekender when all I need to carry is a couple shirts, underwear, and a kindle; it’s just not ideal for laptop carriage. It might be nice for someone who carries a lot of “documents” or “folios” or maybe even shirts - who doesn’t need internal organization or is bringing their own. It is priced appropriately given the build quality and my hope that things not being “cheap” means that staff are paid well (it seems that Mission Workshop has about 20 workers). That is important to me in an industry that has so often taken advantage of its workforce - both in the less-skilled factory jobs and the high-profile fashion and design world. Overall 8 out of 10: recommended to people not carrying laptops.&lt;/p&gt;</content><author><name></name></author><category term="mission workshop" /><category term="reviews" /><summary type="html"></summary></entry><entry><title type="html">Enlightened Hospitality</title><link href="https://piazzamp.github.io/notes/enlightened-hospitality" rel="alternate" type="text/html" title="Enlightened Hospitality" /><published>2017-06-01T19:41:28-05:00</published><updated>2017-06-01T19:41:28-05:00</updated><id>https://piazzamp.github.io/notes/enlightened-hospitality</id><content type="html" xml:base="https://piazzamp.github.io/notes/enlightened-hospitality">&lt;p&gt;It’s a bit odd that I wrote my last post (Service Oriented Culture) just before starting Danny Meyer’s fantastic Setting the Table. There are numerous overlapping concepts between my little post and Meyer’s book - about treating people right and trying not to be an asshole. But one thing Danny hits on the head that I failed to mention is that the team comes first in the pyramid-of-needs that makes up his set of “enlightened hospitality” practices. The premier example he gives is banning smoking in Union Square Cafe in an attempt to protect his team from facing the ill effects of smoke exposure. I’ve seen this commitment to protecting the team in my brother when he sticks up for the numerous young women on staff when disrespectful men come out to harass. But I should also note that it is imperative to be hospitable to your coworkers. Why bother helping out your paying customers if you won’t give your cube-mate or back-waiter a sincere hello? You all have to work towards some common goal, you are in no way competing with one another. If you are trying to find a counter example realize that both you and your internal competitor will both be unemployed if the company isn’t successful. Your company’s success, ironically, also depends on this hospitality. Your client success manager shouldn’t have to tell you that the request they’re making is being passed down from some high-profile client - you should trust that client representative to pass down to you the most important of requests while protecting you from inane bullshit.tl;dr: continue to be nice to folks both inside and outside of your perceived team.&lt;/p&gt;</content><author><name></name></author><category term="setting the table" /><category term="hospitality" /><summary type="html">It’s a bit odd that I wrote my last post (Service Oriented Culture) just before starting Danny Meyer’s fantastic Setting the Table. There are numerous overlapping concepts between my little post and Meyer’s book - about treating people right and trying not to be an asshole. But one thing Danny hits on the head that I failed to mention is that the team comes first in the pyramid-of-needs that makes up his set of “enlightened hospitality” practices. The premier example he gives is banning smoking in Union Square Cafe in an attempt to protect his team from facing the ill effects of smoke exposure. I’ve seen this commitment to protecting the team in my brother when he sticks up for the numerous young women on staff when disrespectful men come out to harass. But I should also note that it is imperative to be hospitable to your coworkers. Why bother helping out your paying customers if you won’t give your cube-mate or back-waiter a sincere hello? You all have to work towards some common goal, you are in no way competing with one another. If you are trying to find a counter example realize that both you and your internal competitor will both be unemployed if the company isn’t successful. Your company’s success, ironically, also depends on this hospitality. Your client success manager shouldn’t have to tell you that the request they’re making is being passed down from some high-profile client - you should trust that client representative to pass down to you the most important of requests while protecting you from inane bullshit.tl;dr: continue to be nice to folks both inside and outside of your perceived team.</summary></entry><entry><title type="html">Service Oriented Culture</title><link href="https://piazzamp.github.io/notes/service-oriented-culture" rel="alternate" type="text/html" title="Service Oriented Culture" /><published>2017-05-23T20:00:29-05:00</published><updated>2017-05-23T20:00:29-05:00</updated><id>https://piazzamp.github.io/notes/service-oriented-culture</id><content type="html" xml:base="https://piazzamp.github.io/notes/service-oriented-culture">&lt;p&gt;I recently took on a second job as a host at a small new restaurant. I wanted in on this place, Juliet, because I love food and doing this on weekends could help me get familiar with the food &amp;amp; bev scene in Charleston. After two weeks on the job I realized that I’m also just into the idea of customer service; the return on investment for things as easy as remembering someone’s name is insane. When expectations are basic, it’s not difficult to exceed patron’s expectations. Well, sure, smiles and customer satisfaction pay off immediately but repeat business pays off in the traditional sense over time.	To be sure, you have to remain genuine throughout any customer interactions. Don’t lie to make things seem more personalized – don’t say you’re going out of your way for this particular patron when you would’ve done it for anyone. Instead, use good old fashioned spin to phrase things that may be unsavory as though they may be in the customer’s interest. Be prepared with alternatives as well: “I can’t offer you tier two, but we’ll give you tier one for no extra charge” or whatever the circumstances allow for.	Being flexible goes miles as well. It piggybacks on being prepared with satisfactory alternatives. Doing something simple may seem like a big effort to your clients. When I worked at J. Crew in high school a nice woman asked me when we would get a particular set of shorts back in stock – we had no idea, so I offered to jot down her number and alert her when a new shipment came in. She was elated and it only cost me one sticky note and, later, a 45 second phone call. Don’t refuse to help someone out because it’s outside of standard practice. Be flexible and come up with a reasonable alternative that will work for you and them. Flexibility also applies to the words you use in these interactions – try not to make things sound like dead ends when there are valuable alternatives within arm’s reach.	Satisfying customers is as easy as seeming human: using full sentences, putting in what would be a normal amount of effort in any other interpersonal interaction, making other folks happy, etc. It makes no sense to me that standards for communication drop in contexts of sales – it’s reasonable for consumers to be wary of salespeople, but that’s unnecessary if everyone stopped trying to take advantage of each other. When being flexible and offering alternatives to your customers, don’t use it as an opportunity to upsell; be a rock of trust for the consumer. Consumers should trust the folks closer to the product, service, menu, etc, but the tendency for those more familiar with the goods to take advantage of their knowledge in order to extract more ‘value’ from the customer forces consumers to stay on guard. Providing good customer service is a win-win: the customer has the best possible experience, making the most of what you have to offer plus they feel comfortable and may be more likely to return in the future. If you go for the short-term win by upselling, putting your reputation on the line, you may lose the opportunity to make sales later. I think it’s a pretty clear embodiment of karma, eh?	I’m thinking about this because last night DJ and I went to Fig for dinner. Juliet’s closed on Mondays so we had the evening off. The experience was extremely smooth – DJ and I sat in awe. Every person we interacted with knew every detail of the menu. They were all exceptionally personable and offered detailed, trustworthy recommendations. There was a clear symbiosis wherein the staff’s commitment and passion for the menu, experience, and service meshed with DJ and I’s fascination with food &amp;amp; wine, commitment to service, and familiarity with the scene. Imagine being a waiter and serving folks who don’t give a hoot about what you’re doing, the experience you’re trying to cultivate; imagine being an eater who’s committed to learning about food and service and facing a stiff or robotic waiter. The more interest people show for each other’s passion areas, the more satisfying these interactions can be.&lt;/p&gt;</content><author><name></name></author><summary type="html">I recently took on a second job as a host at a small new restaurant. I wanted in on this place, Juliet, because I love food and doing this on weekends could help me get familiar with the food &amp;amp; bev scene in Charleston. After two weeks on the job I realized that I’m also just into the idea of customer service; the return on investment for things as easy as remembering someone’s name is insane. When expectations are basic, it’s not difficult to exceed patron’s expectations. Well, sure, smiles and customer satisfaction pay off immediately but repeat business pays off in the traditional sense over time. To be sure, you have to remain genuine throughout any customer interactions. Don’t lie to make things seem more personalized – don’t say you’re going out of your way for this particular patron when you would’ve done it for anyone. Instead, use good old fashioned spin to phrase things that may be unsavory as though they may be in the customer’s interest. Be prepared with alternatives as well: “I can’t offer you tier two, but we’ll give you tier one for no extra charge” or whatever the circumstances allow for. Being flexible goes miles as well. It piggybacks on being prepared with satisfactory alternatives. Doing something simple may seem like a big effort to your clients. When I worked at J. Crew in high school a nice woman asked me when we would get a particular set of shorts back in stock – we had no idea, so I offered to jot down her number and alert her when a new shipment came in. She was elated and it only cost me one sticky note and, later, a 45 second phone call. Don’t refuse to help someone out because it’s outside of standard practice. Be flexible and come up with a reasonable alternative that will work for you and them. Flexibility also applies to the words you use in these interactions – try not to make things sound like dead ends when there are valuable alternatives within arm’s reach. Satisfying customers is as easy as seeming human: using full sentences, putting in what would be a normal amount of effort in any other interpersonal interaction, making other folks happy, etc. It makes no sense to me that standards for communication drop in contexts of sales – it’s reasonable for consumers to be wary of salespeople, but that’s unnecessary if everyone stopped trying to take advantage of each other. When being flexible and offering alternatives to your customers, don’t use it as an opportunity to upsell; be a rock of trust for the consumer. Consumers should trust the folks closer to the product, service, menu, etc, but the tendency for those more familiar with the goods to take advantage of their knowledge in order to extract more ‘value’ from the customer forces consumers to stay on guard. Providing good customer service is a win-win: the customer has the best possible experience, making the most of what you have to offer plus they feel comfortable and may be more likely to return in the future. If you go for the short-term win by upselling, putting your reputation on the line, you may lose the opportunity to make sales later. I think it’s a pretty clear embodiment of karma, eh? I’m thinking about this because last night DJ and I went to Fig for dinner. Juliet’s closed on Mondays so we had the evening off. The experience was extremely smooth – DJ and I sat in awe. Every person we interacted with knew every detail of the menu. They were all exceptionally personable and offered detailed, trustworthy recommendations. There was a clear symbiosis wherein the staff’s commitment and passion for the menu, experience, and service meshed with DJ and I’s fascination with food &amp;amp; wine, commitment to service, and familiarity with the scene. Imagine being a waiter and serving folks who don’t give a hoot about what you’re doing, the experience you’re trying to cultivate; imagine being an eater who’s committed to learning about food and service and facing a stiff or robotic waiter. The more interest people show for each other’s passion areas, the more satisfying these interactions can be.</summary></entry><entry><title type="html">Skirting project goals</title><link href="https://piazzamp.github.io/notes/skirting-project-goals" rel="alternate" type="text/html" title="Skirting project goals" /><published>2017-04-14T20:33:15-05:00</published><updated>2017-04-14T20:33:15-05:00</updated><id>https://piazzamp.github.io/notes/skirting-project-goals</id><content type="html" xml:base="https://piazzamp.github.io/notes/skirting-project-goals">&lt;p&gt;In my earlier post, I said I wanted to set up my spring project (a little scheduling web app) only using infrastructure that is free-of-charge. After spending a while trolling the web looking for the cheapest hosted database, I could not find any for less than $10 per month. Most of the popular cloud service providers offer some weird, proprietary “nosql” “database” that’s usually a variant of a key-value store: Amazon has Dynamo, Google  has ‘Cloud Datastore’ (creative naming, as always), and I bet Heroku has a similar thing (their free-tier relational database is limited to like 10k rows or 5mb lol).Alas, my solution, I think, will be to set install mysql-server on the $5/month Digital Ocean box that I keep as a playground (the only things running on this box are my hacker news scraper on a cron job and sshd). It’s a bit of a bummer since I’ll have to maintain the database myself. I am terrified of being #online and will have to lookup how to enable key-based authentication on 32-bit mysql and set up harsh firewall rules, etc, etc.But, where will the app itself run? I am leaning towards Google App Engine - I used it for my senior project in school so I know know the basics of setting up a new project. More importantly, they have pretty generous ‘always-free’ usage limit: 28 compute-hours per day. They also give you 100 emails per day which should totally cover the amount of notifications I plan to have the service generate.My other goal was to avoid charging “avoid charging money for the majority of users”. I plan to offer it on a pay-what-you-want model - it seems that a lot of, uh, podcasts and #content #creators get money like that. I like the patreon model that’s like a kickstarter for things that are real; you can set up tiers of ‘rewards’. I’ll have to play that bit by ear though.&lt;/p&gt;</content><author><name></name></author><summary type="html">In my earlier post, I said I wanted to set up my spring project (a little scheduling web app) only using infrastructure that is free-of-charge. After spending a while trolling the web looking for the cheapest hosted database, I could not find any for less than $10 per month. Most of the popular cloud service providers offer some weird, proprietary “nosql” “database” that’s usually a variant of a key-value store: Amazon has Dynamo, Google  has ‘Cloud Datastore’ (creative naming, as always), and I bet Heroku has a similar thing (their free-tier relational database is limited to like 10k rows or 5mb lol).Alas, my solution, I think, will be to set install mysql-server on the $5/month Digital Ocean box that I keep as a playground (the only things running on this box are my hacker news scraper on a cron job and sshd). It’s a bit of a bummer since I’ll have to maintain the database myself. I am terrified of being #online and will have to lookup how to enable key-based authentication on 32-bit mysql and set up harsh firewall rules, etc, etc.But, where will the app itself run? I am leaning towards Google App Engine - I used it for my senior project in school so I know know the basics of setting up a new project. More importantly, they have pretty generous ‘always-free’ usage limit: 28 compute-hours per day. They also give you 100 emails per day which should totally cover the amount of notifications I plan to have the service generate.My other goal was to avoid charging “avoid charging money for the majority of users”. I plan to offer it on a pay-what-you-want model - it seems that a lot of, uh, podcasts and #content #creators get money like that. I like the patreon model that’s like a kickstarter for things that are real; you can set up tiers of ‘rewards’. I’ll have to play that bit by ear though.</summary></entry><entry><title type="html">“Complex Logic” in Go Templates</title><link href="https://piazzamp.github.io/notes/complex-logic-in-go-templates" rel="alternate" type="text/html" title="“Complex Logic” in Go Templates" /><published>2017-03-23T22:17:09-05:00</published><updated>2017-03-23T22:17:09-05:00</updated><id>https://piazzamp.github.io/notes/complex-logic-in-go-templates</id><content type="html" xml:base="https://piazzamp.github.io/notes/complex-logic-in-go-templates">&lt;p&gt;Last week, I was looking to do something in a Go template that I obviously should not have been trying to do. In my dive through stackoverflow and the mailing lists, I came across a pretty funny quip: Accipiter Nisus said “Whether or not assigning a new value to a variable is considered complex logic might be up for discussion.” And, of course, I sat at my desk laughing at the dystopian hellscape through which we each wade every day.&lt;/p&gt;

&lt;p&gt;I don’t entirely agree with the idea but, in this context, it’s right. I was trying to solve the wrong problem. Or the right problem in a sub-optimal way due to a misunderstanding of the tools I had at my disposal.&lt;/p&gt;

&lt;p&gt;The problem I was trying to solve was a pretty straightforward web programming task - after a ‘delete’ action, remove an element (and its children) from the page. I already had an AJAX endpoint to handle the delete request and I wanted to add some client-side stuff to handle the clicks. My naive javascript skills told me to add unique IDs to each element that users could click (so I could getElementById later). That’s when I started trying to add some sort of accumulator to the template ({{i := 0}}, etc) which is not possible in Go’s templating engine.&lt;/p&gt;

&lt;p&gt;My solution was to set the IDs of those interactive elements via javascript after the page loaded. It is pretty bad. I worked through some of a javascript tutorial like 3 days after I wrote this shitty code and now I think I know a more idiomatic way to do it: using document.querySelecorAll to grab all of the interactive things I wanted to work with. Then add an event listener on the appropriate child element (delete button) that makes the AJAX request and removes the outer element on success. This approach is somewhat limited by scoping issues, for example, if you had:&lt;/p&gt;

&lt;div class=&quot;”deletable”&quot;&gt;
Matt &lt;button type=&quot;”button”&quot;&gt;delete&lt;/button&gt;
&lt;div&gt;


The click listener on the button should not remove this, but it could remove this.parentNode or the handler could be bound to the div element.addEventListener(“click”, deleteHandler.bind(outerDiv));

Making use of javascript’s this keyword and iterating across the nodelist returned by querySelectorAll are thousands of times better than trying to cajole a template to do something it wasn’t designed to do.

The moral of the story is that you should learn javascript.

tl;dr: if you’re having trouble doing seemingly simple things in your html templates, you’re probably approaching the problem incorrectly.
&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">Last week, I was looking to do something in a Go template that I obviously should not have been trying to do. In my dive through stackoverflow and the mailing lists, I came across a pretty funny quip: Accipiter Nisus said “Whether or not assigning a new value to a variable is considered complex logic might be up for discussion.” And, of course, I sat at my desk laughing at the dystopian hellscape through which we each wade every day.</summary></entry><entry><title type="html">Spring Project - Scheduling</title><link href="https://piazzamp.github.io/notes/spring-project-scheduling" rel="alternate" type="text/html" title="Spring Project - Scheduling" /><published>2017-03-19T12:58:24-05:00</published><updated>2017-03-19T12:58:24-05:00</updated><id>https://piazzamp.github.io/notes/spring-project-scheduling</id><content type="html" xml:base="https://piazzamp.github.io/notes/spring-project-scheduling">&lt;p&gt;In the world of computer science, there are many difficult problems under the ‘scheduling’ umbrella - interrupts, multi-threading, locks, and so on. However, in the real world, there are seemingly simple scheduling tasks that human people engage in (either via manual arrangement or with the help of #software). The specific, human example I’m thinking of is scheduling part-time employees in a food &amp;amp; bev environment.&lt;/p&gt;

&lt;p&gt;My brother, DJ, is helping open a few restaurants while managing a coffee shop. I have often seen him come home, open up google calendar, and begin to drag and drop 4, 6, and 8 hour blocks while calculating, in his head, which roles (dishwasher, barista, etc) need to be filled when, who can fill them, and who has requested time off. Of course, being an annoying software boy, I made fun of him for not using some product that could take in the resource pool, constraints, and desired staffing and output a decent schedule.&lt;/p&gt;

&lt;p&gt;It turns out there are 2 SaaS products that aim to solve this problem and many full-blown HR systems that allow admins to schedule staff. These 2 standalone options are extrememly overpriced (and probably include features that are only used by a small minority of organizations).&lt;/p&gt;

&lt;p&gt;When I Work is a beautiful product that has iOS and Android apps ready to download. It’s about $1 per user. They have a hard-to-find free tier that is significantly limited (&amp;lt; 6 users, no hallmark features, etc). It seemed like an OK choice for a very-small place. But! It only allows schedules to be planned 2 weeks ahead of time (in the free version only, I think).&lt;/p&gt;

&lt;p&gt;Schedulefly is not as sleek as When I Work, but it is at least as powerful (plus you can schedule arbitrarily far into the future as far as I can tell). But it rather expensive - with the cheapest plan starting at $30 per month.&lt;/p&gt;

&lt;p&gt;Goal&lt;/p&gt;

&lt;p&gt;Write a simple-to-use scheduling web app exclusively using free cloud services. I want to avoid charging money for the majority of users. Sure, it’d be fun to make some money with this, but I think that’s where our friends at Schedulefly went wrong. If I can use free-tier AWS/GCE resources, then the only ‘cost’ of running it will be my time.&lt;/p&gt;

&lt;p&gt;Minimum requirements:&lt;/p&gt;

&lt;p&gt;employees have skills that correlate with roles they can play for a shift of work (running the register, busboy, etc)
employees can describe their availabilty and a maximum number of hours they’re willing to work per week
admins (managers?) can describe which skills each employee has
admins describe how many of each role they want at any time during a day
admins can reassign shifts after the system has assigned them
Table stakes for a real product:&lt;/p&gt;

&lt;p&gt;admin-approved shift swaps
notifications of shift changes
templates for typical week schedules
multiple restaurant management (it can probably be more general than restaurants, pretty much any place with multiple parttime employees like retail storefronts and so on)&lt;/p&gt;</content><author><name></name></author><summary type="html">In the world of computer science, there are many difficult problems under the ‘scheduling’ umbrella - interrupts, multi-threading, locks, and so on. However, in the real world, there are seemingly simple scheduling tasks that human people engage in (either via manual arrangement or with the help of #software). The specific, human example I’m thinking of is scheduling part-time employees in a food &amp;amp; bev environment.</summary></entry><entry><title type="html">Tech Internship Navigation for Students and Hiring Managers</title><link href="https://piazzamp.github.io/notes/interning" rel="alternate" type="text/html" title="Tech Internship Navigation for Students and Hiring Managers" /><published>2017-03-08T19:17:37-06:00</published><updated>2017-03-08T19:17:37-06:00</updated><id>https://piazzamp.github.io/notes/interning</id><content type="html" xml:base="https://piazzamp.github.io/notes/interning">&lt;p&gt;(four great interns in a decommissioned datacenter)While I was in school, I had the formative privilege of interning with a range of different organizations. I’ve found that what I aimed to learn in each experience remained fairly consistent, while my employers’ expectations varied wildly. I think of internships as long-term interviews during which the intern should strive to provide value to their employer. It’s also a great opportunity for a young person without a tight grasp on the industrial landscape to get a feel for different work environments before committing to a permanent position. At the same time, employers should dance along with their interns - pushing them to figure out how much value they could bring to the organization in a full-time setting.Gaining work experience before graduation is one of the most useful, rewarding pursuits a young person can follow. Students have the opportunity to apply what they’re learning in the classroom which helps with both information retention in the classroom and job performance at the office. At the same time, there’s a whole bunch of stuff going on out in the wild that is nowhere on the syllabus; picking up these industry practices is significantly easier in the workplace than in a side project. Internships are possibly the only way to slowly mold your lifestyle from the classroom to the office with limited shock. And, oftentimes, STEM internships offer wages better than standard entry-level part-time jobs. It’s hard to speak for other industries, but no one should be taking unpaid computer science internships in 2017. There are often clear-cut laws regarding how and when internships can be unpaid; interns are usually forbidden from doing work and relegated to ‘shadowing’ or whatever when they’re unpaid. If you’re considering taking an unpaid internship please log on to google.com and search for your local labor laws.	Asking too much of your interns is myopic and greedy. It is very simple: Asking two part-time interns to build your product from the ground up with no technical oversight is exploitative. Sure, it might feel cheap in the short term, but as soon as you scale up and bring in experienced developers to maintain the likely repulsive codebase it will become an obvious sore. Unrestrained youths have a lot of ideas, but let me assure you that only a small fraction of those should be realized and made available to the general public.	I have, however, had the pleasure of re-building a product from the ground up as an intern. The experience was beneficial to me since there was adequate technical oversight and it was at an established company with developed infrastructure. And the company benefited by getting a decent proof-of-concept out of it. The expectations were set along the lines of ‘do you best’ (as you might for an interview) but there was a plan B were I incapable of delivering a satisfactory rewrite. It was a low-risk scenario for my employer while a massive opportunity for myself.	On the other end of the spectrum is when nothing is expected. While less stressful for the intern, setups with non-existent expectations do little to help either party. The intern has to press for tasks and access to relevant systems. And the employer learns little about the skills of the person they’re considering. When I was in a situation like this I felt sort of disrespected - I thought I was being hired for my skills but it turned out that I was more like a corporate requirement that had to be filled. Please don’t hire interns (or full-time employees for that matter) if you have nothing for them to do.	Aside from opportunity cost, Interns usually don’t have much at risk during less-than-ideal internships since they are often at-will or within a set timeframe (the duration of summer break, for example). The main thing to keep in mind (especially for internships that have no set end date) is that internships are a two-party dance in which you must respect your partner while trying to maximize their use to you. If you meet an ambitious entrepreneur who wants you to be a pivotal part of their team (the Woz to their Jobs, if you will), make sure you are adequately compensated - getting in on the ground floor of a budding startup can seem like (and be) a great opportunity, but that only holds true so long as you aren’t overworked and underpaid. Young people are especially easy to take advantage of since they have a limited amount of experience and internships seem like the best low-risk places to gain these sorts of experiences. Engineers must vigilantly screen anyone we work for to protect ourselves from the overzealous and under-technical.	Some of my most rewarding experiences came from part-time internships throughout the school year - it allowed for a smoothing of the flow of intern-appropriate tasks. As a youth I often imagined that internships were only summer things, but the work I did during the school-year ended up being critical to both my understanding of the coursework as well as my performance in industry. I think being ‘always on’ was a fantastic way to immerse myself in the software engineering field. Part-time positions may also be less work for the employers since they’ll only have to deal with (and pay) and intern 10-25 hours per week.	Thanks go out to the folks who hired me while I was in school - I’ll be sure to follow your example if I’m ever in a position to do so.&lt;/p&gt;</content><author><name></name></author><category term="internships" /><category term="computer science" /><summary type="html">(four great interns in a decommissioned datacenter)While I was in school, I had the formative privilege of interning with a range of different organizations. I’ve found that what I aimed to learn in each experience remained fairly consistent, while my employers’ expectations varied wildly. I think of internships as long-term interviews during which the intern should strive to provide value to their employer. It’s also a great opportunity for a young person without a tight grasp on the industrial landscape to get a feel for different work environments before committing to a permanent position. At the same time, employers should dance along with their interns - pushing them to figure out how much value they could bring to the organization in a full-time setting.Gaining work experience before graduation is one of the most useful, rewarding pursuits a young person can follow. Students have the opportunity to apply what they’re learning in the classroom which helps with both information retention in the classroom and job performance at the office. At the same time, there’s a whole bunch of stuff going on out in the wild that is nowhere on the syllabus; picking up these industry practices is significantly easier in the workplace than in a side project. Internships are possibly the only way to slowly mold your lifestyle from the classroom to the office with limited shock. And, oftentimes, STEM internships offer wages better than standard entry-level part-time jobs. It’s hard to speak for other industries, but no one should be taking unpaid computer science internships in 2017. There are often clear-cut laws regarding how and when internships can be unpaid; interns are usually forbidden from doing work and relegated to ‘shadowing’ or whatever when they’re unpaid. If you’re considering taking an unpaid internship please log on to google.com and search for your local labor laws. Asking too much of your interns is myopic and greedy. It is very simple: Asking two part-time interns to build your product from the ground up with no technical oversight is exploitative. Sure, it might feel cheap in the short term, but as soon as you scale up and bring in experienced developers to maintain the likely repulsive codebase it will become an obvious sore. Unrestrained youths have a lot of ideas, but let me assure you that only a small fraction of those should be realized and made available to the general public. I have, however, had the pleasure of re-building a product from the ground up as an intern. The experience was beneficial to me since there was adequate technical oversight and it was at an established company with developed infrastructure. And the company benefited by getting a decent proof-of-concept out of it. The expectations were set along the lines of ‘do you best’ (as you might for an interview) but there was a plan B were I incapable of delivering a satisfactory rewrite. It was a low-risk scenario for my employer while a massive opportunity for myself. On the other end of the spectrum is when nothing is expected. While less stressful for the intern, setups with non-existent expectations do little to help either party. The intern has to press for tasks and access to relevant systems. And the employer learns little about the skills of the person they’re considering. When I was in a situation like this I felt sort of disrespected - I thought I was being hired for my skills but it turned out that I was more like a corporate requirement that had to be filled. Please don’t hire interns (or full-time employees for that matter) if you have nothing for them to do. Aside from opportunity cost, Interns usually don’t have much at risk during less-than-ideal internships since they are often at-will or within a set timeframe (the duration of summer break, for example). The main thing to keep in mind (especially for internships that have no set end date) is that internships are a two-party dance in which you must respect your partner while trying to maximize their use to you. If you meet an ambitious entrepreneur who wants you to be a pivotal part of their team (the Woz to their Jobs, if you will), make sure you are adequately compensated - getting in on the ground floor of a budding startup can seem like (and be) a great opportunity, but that only holds true so long as you aren’t overworked and underpaid. Young people are especially easy to take advantage of since they have a limited amount of experience and internships seem like the best low-risk places to gain these sorts of experiences. Engineers must vigilantly screen anyone we work for to protect ourselves from the overzealous and under-technical. Some of my most rewarding experiences came from part-time internships throughout the school year - it allowed for a smoothing of the flow of intern-appropriate tasks. As a youth I often imagined that internships were only summer things, but the work I did during the school-year ended up being critical to both my understanding of the coursework as well as my performance in industry. I think being ‘always on’ was a fantastic way to immerse myself in the software engineering field. Part-time positions may also be less work for the employers since they’ll only have to deal with (and pay) and intern 10-25 hours per week. Thanks go out to the folks who hired me while I was in school - I’ll be sure to follow your example if I’m ever in a position to do so.</summary></entry><entry><title type="html">Zero Values and JSON in Go</title><link href="https://piazzamp.github.io/notes/zero-values-and-json-in-go" rel="alternate" type="text/html" title="Zero Values and JSON in Go" /><published>2016-02-20T19:41:58-06:00</published><updated>2016-02-20T19:41:58-06:00</updated><id>https://piazzamp.github.io/notes/zero-values-and-json-in-go</id><content type="html" xml:base="https://piazzamp.github.io/notes/zero-values-and-json-in-go">&lt;p&gt;Go is great, I think that is apparent. If you have talked to me about software development at all in the past 5 months then you have certainly heard me talk about Go and how pleasing I find it to write.&lt;/p&gt;

&lt;p&gt;There are great, baked-in features, like documentation, testing, and (obviously) JSON encoding &amp;amp; decoding of native types. It’s very simple to enable - any exported attribute (a field marked public, if you’re java-kin) of a struct can be encoded by the encoding/json package and will give you the obvious result where all struct elements have identical JSON field names. You have the option to override this default behavior and rename the fields or omit them entirely if they’re empty. So if your user has no middleName then the JSON version of that person will just not have a middleName field. Sound strightforward?&lt;/p&gt;

&lt;p&gt;How does encoding/json determine which fields to omit? I can’t say that I have read through their implementation, but it is safe to say that the package omits any field that has the zero-value for its type. That is a 0-length string, the int 0, float 0.0, or false. This works sometimes. If you want to pass back a false or a 0, your JSON representation will simply not have the fields you have set to those values.&lt;/p&gt;

&lt;p&gt;tl;dr: make sure there is no case where you want to send a zero-value via JSON in a field marked omitempty&lt;/p&gt;</content><author><name></name></author><category term="golang" /><category term="json" /><summary type="html">Go is great, I think that is apparent. If you have talked to me about software development at all in the past 5 months then you have certainly heard me talk about Go and how pleasing I find it to write.</summary></entry><entry><title type="html">ringzer0team challenge 113 writeup</title><link href="https://piazzamp.github.io/notes/ringzer0team-challenge-113-writeup" rel="alternate" type="text/html" title="ringzer0team challenge 113 writeup" /><published>2015-11-15T19:02:56-06:00</published><updated>2015-11-15T19:02:56-06:00</updated><id>https://piazzamp.github.io/notes/ringzer0team-challenge-113-writeup</id><content type="html" xml:base="https://piazzamp.github.io/notes/ringzer0team-challenge-113-writeup">&lt;p&gt;big ups to John Anderson (lampwins) for having the curious mind and php know-how to crush this challenge in a matter of minutes – I was just along for the ride really&lt;/p&gt;

&lt;p&gt;this challenge came from ringzer0team.com’s set of web challenges. we have been running through them with the cyber security club for the past few weeks for an upcoming web pen-testing engagement (maybe you’ll be able to read about it here later ;) ).&lt;/p&gt;

&lt;p&gt;the scenario was that you’re resetting the password to the admin console of a website (the challenge lives here). they provide the source code (php) for the password resetting mechanism. it can be summed up thusly: use the current time to seed a PRNG, grab a ‘random’ number between 1000000000000000 and 9999999999999999 to use as a password reset token. then the page will accept GETs with a url parameter k which is compared to the previously generated token. if they match then your new password is printed to the screen, otherwise you get nothing. there is also a 1hr expiration for each token.&lt;/p&gt;

&lt;p&gt;the biggest hint for this challenge is that the current time is included in the page telling you that your password has been reset:&lt;/p&gt;

&lt;p&gt;[spoilers follow]&lt;/p&gt;

&lt;p&gt;and we know that that time is used to seen the PRNG. once we convert that to unix time (seconds since 1 Jan 1970, UTC) we have the seed and can replicate the line&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000000000000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9999999999999999&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;bonus: php one liner (once you have the timestamp):&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;php &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;srand(1447631726); echo rand(1000000000000000,9999999999999999);&quot;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name></name></author><category term="ringzer0teamctf" /><category term="wargame" /><category term="hacking" /><summary type="html">big ups to John Anderson (lampwins) for having the curious mind and php know-how to crush this challenge in a matter of minutes – I was just along for the ride really</summary></entry><entry><title type="html">2015 CSAW CTF: two forensics 100s flash &amp;amp; keep calm</title><link href="https://piazzamp.github.io/notes/2015-csaw-ctf-two-forensics-100s-flash-keep" rel="alternate" type="text/html" title="2015 CSAW CTF: two forensics 100s flash &amp; keep calm" /><published>2015-10-07T08:01:00-05:00</published><updated>2015-10-07T08:01:00-05:00</updated><id>https://piazzamp.github.io/notes/2015-csaw-ctf-two-forensics-100s-flash-keep</id><content type="html" xml:base="https://piazzamp.github.io/notes/2015-csaw-ctf-two-forensics-100s-flash-keep">&lt;p&gt;these two forensics challenges were especially easy – perhaps I just found skiddie workarounds or something. but, points-wise, they were on the same level as notesy so their ease makes some sense :)&lt;/p&gt;

&lt;p&gt;keep calm and ctf&lt;/p&gt;

&lt;p&gt;the challenge presented us with an image and told us it was special. steganography was likely a force at play.&lt;/p&gt;

&lt;p&gt;above is the way I actually solved this one (with david). highlighted, you can see the flag. this solution was inspired by the photo of yoshi in fuzyll’s recon challenge. both of these images contained stegonagraphic data inside of an image. for yoshi, I tried to view the source to look for html comments or some other easy hint like that, but instead I saw this steganographic stuff. nice nice.
an easier (and more 1337 way to find this) is to combine xxd and vim into a mythical hexeditor. thanks to my coworker, king, for showing me this recently.
basically, open img.jpg with vim and type :%!xxd which, if I am interpreting it correctly, runs xxd on the file (aka %) and writes the results back into the buffer. see below.&lt;/p&gt;

&lt;p&gt;then just slam :q! to exit without saving the hexdump. or you could, ya’‘know, just hexdump outside of vim.&lt;/p&gt;

&lt;p&gt;flash&lt;/p&gt;

&lt;p&gt;the challenge statment for this one was: We were able to grab an image of a harddrive. Find out what’’s on it. tough. I downloaded the file and ran strings on it to see if there was anything especially juicy. the last printable string in the image turned out to be the flag:&lt;/p&gt;

&lt;p&gt;that’s it. welcome to ctfs. flags just sort of plop out of files like that sometimes.&lt;/p&gt;</content><author><name></name></author><category term="csaw" /><category term="ctf" /><category term="hacking" /><summary type="html">these two forensics challenges were especially easy – perhaps I just found skiddie workarounds or something. but, points-wise, they were on the same level as notesy so their ease makes some sense :)</summary></entry></feed>